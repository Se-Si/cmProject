//////////////////////////////// SUN + PLANETS

/*

    Run this before the main algorithm starts
    It finds the relative positions of the planets at the start of the system
    
*/

public static Vector3D setupPlanetsRelPos(Particle3D[] planets, int moonIndex) {

        private int loopOrbits;

        private Vector3D[] planetsRelPos = new Vector3D[planets.length()- 1];

        for (loopOrbits = 1; loopOrbits < planets.length(); loopOrbits++) {

            if (loopOrbits != moonIndex) {
            
                planetsRelPos[i-1] = Vector3D.subtract(planets[i].getPosition(), planets[0].getPosition());
                
            }
            
        }
        
        return planetsRelPos;
        
    }
    
 /*

   This method assumes that the array planetsPreRelPos is set with all the starting positions of
   the planets and comets before the main algorithm's loop is started.
    
*/   
        
public static double planetOrbits(Particle3D[] planets, Vector3D[] planetsPreRelPos, double[] numPlanetOrbits, int moonIndex) {

    private int loopOrbits;
    private Vector3D[] planetsCurrentRelPos = new Vector3D[planets.length() - 1];
    
    
    for (loopOrbits = 1; loopOrbits < planets.length; loopOrbits++) {
    
        if (loopOrbits != moonIndex) {
    
            planetsCurrentRelPos[i-1] = Vector3D.subtract(planets[i].getPosition(), planets[0].getPosition());
            
            numPlanetOrbits[i-1] = numPlanetOrbits[i-1] + java.lang.Math.acos(Vector3D.dot(planetsPreRelPos[i-1].getPosition(), planetsCurrentRelPos[i-1].getPosition()) / (planetsPreRelPos[i-1].mag * planetsCurrentRelPos[i-1].mag * 2 * Math.PI));
            
            planetsPreRelPos = new Vector3D(planetsCurrentRelPos);
     
        }
            
    }
    
    return numPlanetOrbits;
  
}

//////////////////////////////// Earth + Moon


/*

    Use this to check for the moon and assign its index.

*/

for (loopOrbits = 0; loopOrbits < planets.length; loopOrbits++) {

    if (moon.getName() == "Luna") {

        moonIndex = loopOrbits;
        
    } else {
    
        moonIndex = -1;
        
    }
    
}

/*

    Have this around each moon method.
    
*/

if (moonIndex != -1) {

    // method goes here
    
}   

/*

    This is the pre-algorithm setup method for the relative starting position of the moon to the earth.
    
*/
    
public static Vector3D setupMoonRelPos(Particle3D moon, Particle3D earth) {

    private Vector3D moonRelPos = new Vector3D;

    moonRelPos= Vector3D.subtract(moon.getPosition(), earth.getPosition());
    
    return relativePos;
    
}

/*

    This is the main algorithm method for calculating the number of orbits and updating the relative position
    
*/

public static double moonOrbits(Particle3D moon, Particle3D earth, Vector3D moonPreRelPos, double numMoonOrbits, int moonIndex) {

    private Vector3D moonCurrentRelPos = new Vector3D;

    moonCurrentRelPos = Vector3D.subtract(moon.getPosition(), earth.getPosition());
    
    numMoonOrbits = numMoonOrbits + java.lang.Math.acos(Vector3D.dot(moonPreRelPos.getPosition(), moonCurrentRelPos.getPosition()) / (moonPreRelPos.mag * moonCurrentRelPos.mag * 2 * Math.PI));
    
    moonPreRelPos = new Vector3D(moonCurrentRelPos);
        
    return numMoonOrbits;
        
}    
 
    
         
    
        
    
